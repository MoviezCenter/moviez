// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MoviezCenter/moviez/ent/genre"
	"github.com/MoviezCenter/moviez/ent/movie"
	"github.com/MoviezCenter/moviez/ent/predicate"
	"github.com/MoviezCenter/moviez/ent/review"
)

// MovieUpdate is the builder for updating Movie entities.
type MovieUpdate struct {
	config
	hooks    []Hook
	mutation *MovieMutation
}

// Where appends a list predicates to the MovieUpdate builder.
func (mu *MovieUpdate) Where(ps ...predicate.Movie) *MovieUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MovieUpdate) SetTitle(s string) *MovieUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableTitle(s *string) *MovieUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetOverview sets the "overview" field.
func (mu *MovieUpdate) SetOverview(s string) *MovieUpdate {
	mu.mutation.SetOverview(s)
	return mu
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableOverview(s *string) *MovieUpdate {
	if s != nil {
		mu.SetOverview(*s)
	}
	return mu
}

// SetReleaseDate sets the "release_date" field.
func (mu *MovieUpdate) SetReleaseDate(s string) *MovieUpdate {
	mu.mutation.SetReleaseDate(s)
	return mu
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableReleaseDate(s *string) *MovieUpdate {
	if s != nil {
		mu.SetReleaseDate(*s)
	}
	return mu
}

// SetPosterPath sets the "poster_path" field.
func (mu *MovieUpdate) SetPosterPath(s string) *MovieUpdate {
	mu.mutation.SetPosterPath(s)
	return mu
}

// SetNillablePosterPath sets the "poster_path" field if the given value is not nil.
func (mu *MovieUpdate) SetNillablePosterPath(s *string) *MovieUpdate {
	if s != nil {
		mu.SetPosterPath(*s)
	}
	return mu
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (mu *MovieUpdate) AddReviewIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddReviewIDs(ids...)
	return mu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (mu *MovieUpdate) AddReviews(r ...*Review) *MovieUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddReviewIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (mu *MovieUpdate) AddGenreIDs(ids ...int) *MovieUpdate {
	mu.mutation.AddGenreIDs(ids...)
	return mu
}

// AddGenres adds the "genres" edges to the Genre entity.
func (mu *MovieUpdate) AddGenres(g ...*Genre) *MovieUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mu.AddGenreIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (mu *MovieUpdate) Mutation() *MovieMutation {
	return mu.mutation
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (mu *MovieUpdate) ClearReviews() *MovieUpdate {
	mu.mutation.ClearReviews()
	return mu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (mu *MovieUpdate) RemoveReviewIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveReviewIDs(ids...)
	return mu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (mu *MovieUpdate) RemoveReviews(r ...*Review) *MovieUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveReviewIDs(ids...)
}

// ClearGenres clears all "genres" edges to the Genre entity.
func (mu *MovieUpdate) ClearGenres() *MovieUpdate {
	mu.mutation.ClearGenres()
	return mu
}

// RemoveGenreIDs removes the "genres" edge to Genre entities by IDs.
func (mu *MovieUpdate) RemoveGenreIDs(ids ...int) *MovieUpdate {
	mu.mutation.RemoveGenreIDs(ids...)
	return mu
}

// RemoveGenres removes "genres" edges to Genre entities.
func (mu *MovieUpdate) RemoveGenres(g ...*Genre) *MovieUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mu.RemoveGenreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MovieUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MovieUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MovieUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MovieUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MovieUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(movie.Table, movie.Columns, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(movie.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Overview(); ok {
		_spec.SetField(movie.FieldOverview, field.TypeString, value)
	}
	if value, ok := mu.mutation.ReleaseDate(); ok {
		_spec.SetField(movie.FieldReleaseDate, field.TypeString, value)
	}
	if value, ok := mu.mutation.PosterPath(); ok {
		_spec.SetField(movie.FieldPosterPath, field.TypeString, value)
	}
	if mu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.ReviewsTable,
			Columns: []string{movie.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !mu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.ReviewsTable,
			Columns: []string{movie.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.ReviewsTable,
			Columns: []string{movie.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedGenresIDs(); len(nodes) > 0 && !mu.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MovieUpdateOne is the builder for updating a single Movie entity.
type MovieUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieMutation
}

// SetTitle sets the "title" field.
func (muo *MovieUpdateOne) SetTitle(s string) *MovieUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableTitle(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetOverview sets the "overview" field.
func (muo *MovieUpdateOne) SetOverview(s string) *MovieUpdateOne {
	muo.mutation.SetOverview(s)
	return muo
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableOverview(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetOverview(*s)
	}
	return muo
}

// SetReleaseDate sets the "release_date" field.
func (muo *MovieUpdateOne) SetReleaseDate(s string) *MovieUpdateOne {
	muo.mutation.SetReleaseDate(s)
	return muo
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableReleaseDate(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetReleaseDate(*s)
	}
	return muo
}

// SetPosterPath sets the "poster_path" field.
func (muo *MovieUpdateOne) SetPosterPath(s string) *MovieUpdateOne {
	muo.mutation.SetPosterPath(s)
	return muo
}

// SetNillablePosterPath sets the "poster_path" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillablePosterPath(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetPosterPath(*s)
	}
	return muo
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (muo *MovieUpdateOne) AddReviewIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddReviewIDs(ids...)
	return muo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (muo *MovieUpdateOne) AddReviews(r ...*Review) *MovieUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddReviewIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (muo *MovieUpdateOne) AddGenreIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.AddGenreIDs(ids...)
	return muo
}

// AddGenres adds the "genres" edges to the Genre entity.
func (muo *MovieUpdateOne) AddGenres(g ...*Genre) *MovieUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return muo.AddGenreIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (muo *MovieUpdateOne) Mutation() *MovieMutation {
	return muo.mutation
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (muo *MovieUpdateOne) ClearReviews() *MovieUpdateOne {
	muo.mutation.ClearReviews()
	return muo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (muo *MovieUpdateOne) RemoveReviewIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveReviewIDs(ids...)
	return muo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (muo *MovieUpdateOne) RemoveReviews(r ...*Review) *MovieUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveReviewIDs(ids...)
}

// ClearGenres clears all "genres" edges to the Genre entity.
func (muo *MovieUpdateOne) ClearGenres() *MovieUpdateOne {
	muo.mutation.ClearGenres()
	return muo
}

// RemoveGenreIDs removes the "genres" edge to Genre entities by IDs.
func (muo *MovieUpdateOne) RemoveGenreIDs(ids ...int) *MovieUpdateOne {
	muo.mutation.RemoveGenreIDs(ids...)
	return muo
}

// RemoveGenres removes "genres" edges to Genre entities.
func (muo *MovieUpdateOne) RemoveGenres(g ...*Genre) *MovieUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return muo.RemoveGenreIDs(ids...)
}

// Where appends a list predicates to the MovieUpdate builder.
func (muo *MovieUpdateOne) Where(ps ...predicate.Movie) *MovieUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MovieUpdateOne) Select(field string, fields ...string) *MovieUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Movie entity.
func (muo *MovieUpdateOne) Save(ctx context.Context) (*Movie, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MovieUpdateOne) SaveX(ctx context.Context) *Movie {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MovieUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MovieUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MovieUpdateOne) sqlSave(ctx context.Context) (_node *Movie, err error) {
	_spec := sqlgraph.NewUpdateSpec(movie.Table, movie.Columns, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Movie.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movie.FieldID)
		for _, f := range fields {
			if !movie.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != movie.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(movie.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Overview(); ok {
		_spec.SetField(movie.FieldOverview, field.TypeString, value)
	}
	if value, ok := muo.mutation.ReleaseDate(); ok {
		_spec.SetField(movie.FieldReleaseDate, field.TypeString, value)
	}
	if value, ok := muo.mutation.PosterPath(); ok {
		_spec.SetField(movie.FieldPosterPath, field.TypeString, value)
	}
	if muo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.ReviewsTable,
			Columns: []string{movie.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !muo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.ReviewsTable,
			Columns: []string{movie.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.ReviewsTable,
			Columns: []string{movie.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedGenresIDs(); len(nodes) > 0 && !muo.mutation.GenresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Movie{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
