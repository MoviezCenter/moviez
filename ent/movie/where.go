// Code generated by ent, DO NOT EDIT.

package movie

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/MoviezCenter/moviez/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldTitle, v))
}

// Overview applies equality check predicate on the "overview" field. It's identical to OverviewEQ.
func Overview(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldOverview, v))
}

// ReleaseDate applies equality check predicate on the "release_date" field. It's identical to ReleaseDateEQ.
func ReleaseDate(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldReleaseDate, v))
}

// PosterPath applies equality check predicate on the "poster_path" field. It's identical to PosterPathEQ.
func PosterPath(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldPosterPath, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldTitle, v))
}

// OverviewEQ applies the EQ predicate on the "overview" field.
func OverviewEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldOverview, v))
}

// OverviewNEQ applies the NEQ predicate on the "overview" field.
func OverviewNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldOverview, v))
}

// OverviewIn applies the In predicate on the "overview" field.
func OverviewIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldOverview, vs...))
}

// OverviewNotIn applies the NotIn predicate on the "overview" field.
func OverviewNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldOverview, vs...))
}

// OverviewGT applies the GT predicate on the "overview" field.
func OverviewGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldOverview, v))
}

// OverviewGTE applies the GTE predicate on the "overview" field.
func OverviewGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldOverview, v))
}

// OverviewLT applies the LT predicate on the "overview" field.
func OverviewLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldOverview, v))
}

// OverviewLTE applies the LTE predicate on the "overview" field.
func OverviewLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldOverview, v))
}

// OverviewContains applies the Contains predicate on the "overview" field.
func OverviewContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldOverview, v))
}

// OverviewHasPrefix applies the HasPrefix predicate on the "overview" field.
func OverviewHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldOverview, v))
}

// OverviewHasSuffix applies the HasSuffix predicate on the "overview" field.
func OverviewHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldOverview, v))
}

// OverviewEqualFold applies the EqualFold predicate on the "overview" field.
func OverviewEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldOverview, v))
}

// OverviewContainsFold applies the ContainsFold predicate on the "overview" field.
func OverviewContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldOverview, v))
}

// ReleaseDateEQ applies the EQ predicate on the "release_date" field.
func ReleaseDateEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldReleaseDate, v))
}

// ReleaseDateNEQ applies the NEQ predicate on the "release_date" field.
func ReleaseDateNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldReleaseDate, v))
}

// ReleaseDateIn applies the In predicate on the "release_date" field.
func ReleaseDateIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldReleaseDate, vs...))
}

// ReleaseDateNotIn applies the NotIn predicate on the "release_date" field.
func ReleaseDateNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldReleaseDate, vs...))
}

// ReleaseDateGT applies the GT predicate on the "release_date" field.
func ReleaseDateGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldReleaseDate, v))
}

// ReleaseDateGTE applies the GTE predicate on the "release_date" field.
func ReleaseDateGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldReleaseDate, v))
}

// ReleaseDateLT applies the LT predicate on the "release_date" field.
func ReleaseDateLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldReleaseDate, v))
}

// ReleaseDateLTE applies the LTE predicate on the "release_date" field.
func ReleaseDateLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldReleaseDate, v))
}

// ReleaseDateContains applies the Contains predicate on the "release_date" field.
func ReleaseDateContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldReleaseDate, v))
}

// ReleaseDateHasPrefix applies the HasPrefix predicate on the "release_date" field.
func ReleaseDateHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldReleaseDate, v))
}

// ReleaseDateHasSuffix applies the HasSuffix predicate on the "release_date" field.
func ReleaseDateHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldReleaseDate, v))
}

// ReleaseDateEqualFold applies the EqualFold predicate on the "release_date" field.
func ReleaseDateEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldReleaseDate, v))
}

// ReleaseDateContainsFold applies the ContainsFold predicate on the "release_date" field.
func ReleaseDateContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldReleaseDate, v))
}

// PosterPathEQ applies the EQ predicate on the "poster_path" field.
func PosterPathEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldPosterPath, v))
}

// PosterPathNEQ applies the NEQ predicate on the "poster_path" field.
func PosterPathNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldPosterPath, v))
}

// PosterPathIn applies the In predicate on the "poster_path" field.
func PosterPathIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldPosterPath, vs...))
}

// PosterPathNotIn applies the NotIn predicate on the "poster_path" field.
func PosterPathNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldPosterPath, vs...))
}

// PosterPathGT applies the GT predicate on the "poster_path" field.
func PosterPathGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldPosterPath, v))
}

// PosterPathGTE applies the GTE predicate on the "poster_path" field.
func PosterPathGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldPosterPath, v))
}

// PosterPathLT applies the LT predicate on the "poster_path" field.
func PosterPathLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldPosterPath, v))
}

// PosterPathLTE applies the LTE predicate on the "poster_path" field.
func PosterPathLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldPosterPath, v))
}

// PosterPathContains applies the Contains predicate on the "poster_path" field.
func PosterPathContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldPosterPath, v))
}

// PosterPathHasPrefix applies the HasPrefix predicate on the "poster_path" field.
func PosterPathHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldPosterPath, v))
}

// PosterPathHasSuffix applies the HasSuffix predicate on the "poster_path" field.
func PosterPathHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldPosterPath, v))
}

// PosterPathEqualFold applies the EqualFold predicate on the "poster_path" field.
func PosterPathEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldPosterPath, v))
}

// PosterPathContainsFold applies the ContainsFold predicate on the "poster_path" field.
func PosterPathContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldPosterPath, v))
}

// HasReviews applies the HasEdge predicate on the "reviews" edge.
func HasReviews() predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewsWith applies the HasEdge predicate on the "reviews" edge with a given conditions (other predicates).
func HasReviewsWith(preds ...predicate.Review) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := newReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenres applies the HasEdge predicate on the "genres" edge.
func HasGenres() predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GenresTable, GenresPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenresWith applies the HasEdge predicate on the "genres" edge with a given conditions (other predicates).
func HasGenresWith(preds ...predicate.Genre) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := newGenresStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.NotPredicates(p))
}
