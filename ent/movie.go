// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/MoviezCenter/moviez/ent/movie"
)

// Movie is the model entity for the Movie schema.
type Movie struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Overview holds the value of the "overview" field.
	Overview string `json:"overview,omitempty"`
	// ReleaseDate holds the value of the "release_date" field.
	ReleaseDate string `json:"release_date,omitempty"`
	// PosterPath holds the value of the "poster_path" field.
	PosterPath string `json:"poster_path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovieQuery when eager-loading is set.
	Edges        MovieEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MovieEdges holds the relations/edges for other nodes in the graph.
type MovieEdges struct {
	// Reviews holds the value of the reviews edge.
	Reviews []*Review `json:"reviews,omitempty"`
	// Genres holds the value of the genres edge.
	Genres []*Genre `json:"genres,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e MovieEdges) ReviewsOrErr() ([]*Review, error) {
	if e.loadedTypes[0] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// GenresOrErr returns the Genres value or an error if the edge
// was not loaded in eager-loading.
func (e MovieEdges) GenresOrErr() ([]*Genre, error) {
	if e.loadedTypes[1] {
		return e.Genres, nil
	}
	return nil, &NotLoadedError{edge: "genres"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Movie) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case movie.FieldID:
			values[i] = new(sql.NullInt64)
		case movie.FieldTitle, movie.FieldOverview, movie.FieldReleaseDate, movie.FieldPosterPath:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Movie fields.
func (m *Movie) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movie.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case movie.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case movie.FieldOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overview", values[i])
			} else if value.Valid {
				m.Overview = value.String
			}
		case movie.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				m.ReleaseDate = value.String
			}
		case movie.FieldPosterPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field poster_path", values[i])
			} else if value.Valid {
				m.PosterPath = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Movie.
// This includes values selected through modifiers, order, etc.
func (m *Movie) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryReviews queries the "reviews" edge of the Movie entity.
func (m *Movie) QueryReviews() *ReviewQuery {
	return NewMovieClient(m.config).QueryReviews(m)
}

// QueryGenres queries the "genres" edge of the Movie entity.
func (m *Movie) QueryGenres() *GenreQuery {
	return NewMovieClient(m.config).QueryGenres(m)
}

// Update returns a builder for updating this Movie.
// Note that you need to call Movie.Unwrap() before calling this method if this Movie
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Movie) Update() *MovieUpdateOne {
	return NewMovieClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Movie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Movie) Unwrap() *Movie {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Movie is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Movie) String() string {
	var builder strings.Builder
	builder.WriteString("Movie(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("overview=")
	builder.WriteString(m.Overview)
	builder.WriteString(", ")
	builder.WriteString("release_date=")
	builder.WriteString(m.ReleaseDate)
	builder.WriteString(", ")
	builder.WriteString("poster_path=")
	builder.WriteString(m.PosterPath)
	builder.WriteByte(')')
	return builder.String()
}

// Movies is a parsable slice of Movie.
type Movies []*Movie
